require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"locationsModule":[function(require,module,exports){
var locationsData;

locationsData = JSON.parse(Utils.domLoadScriptSync("images/locations.js"));

exports.setupLocations = function() {
  var applyCSS, card, currentCount, gradient, i, j, len, listHeight, listWidth, locationData, locationImage, maxLocation, overlay, results, scroll, yDistance;
  listWidth = Framer.Device.screen.width;
  listHeight = 416;
  yDistance = listHeight + 0;
  applyCSS = function(layer) {
    var container, h1, h2;
    h2 = layer.querySelector("h2");
    h2.style.font = "600 24px/48px AvenirLTStd-Medium";
    h2.style.textShadow = "0px 2px 1px rgba(0,0,0,0.55);";
    h1 = layer.querySelector("h1");
    h1.style.font = "600 32px/48px AvenirLTStd-Medium";
    h1.style.textShadow = "0px 2px 1px rgba(0,0,0,0.55);";
    h1.style.marginBottom = "8px";
    container = layer.querySelector(".content");
    container.style.position = "absolute";
    return container.style.bottom = "16px";
  };
  scroll = new ScrollComponent({
    width: listWidth,
    height: Framer.Device.screen.height,
    scrollHorizontal: false
  });
  maxLocation = 20;
  currentCount = 0;
  i = 0;
  results = [];
  for (j = 0, len = locationsData.length; j < len; j++) {
    locationData = locationsData[j];
    if (currentCount > maxLocation) {
      continue;
    }
    card = new Layer({
      width: listWidth,
      height: listHeight,
      y: i * yDistance,
      clip: false,
      borderRadius: 4,
      name: "card",
      superLayer: scroll.content
    });
    currentCount++;
    card.backgroundColor = "rgba(255,255,255,1)";
    locationImage = new Layer({
      width: listWidth,
      height: listHeight,
      image: locationData.picture.url,
      name: "image"
    });
    locationImage.superLayer = card;
    gradient = new Layer({
      width: listWidth,
      image: "https://s3.amazonaws.com/f.cl.ly/items/2T2n0H1E3U3c3l442W1x/Gradient.png",
      y: 320
    });
    gradient.superLayer = card;
    overlay = new Layer({
      x: 16,
      y: 220,
      width: listWidth,
      height: 200,
      backgroundColor: null,
      name: "overlay"
    });
    overlay.html = "<div class='content'><h1>" + locationData.address1 + "</h1><h2>" + locationData.maxPeople + "</h2></div>";
    applyCSS(overlay);
    overlay.superLayer = card;
    card.overlay = overlay;
    overlay.bringToFront();
    results.push(i++);
  }
  return results;
};

exports.setupMap = function() {
  var geojson, initialize, map, mapLayer, markers, setupPins;
  mapLayer = new Layer({
    x: 0,
    y: 0,
    width: 750,
    height: 1334,
    backgroundColor: '#fff'
  });
  mapLayer.html = "<div id='map' style='height:1334px'></div>";
  mapLayer.ignoreEvents = false;
  mapLayer.style["-webkit-select"] = "auto";
  mapLayer.style["opacity"] = "1";
  mapLayer.index = 1;
  map = 0;
  initialize = function() {
    L.mapbox.accessToken = "pk.eyJ1IjoiY2hwb3NjaG1hbm4iLCJhIjoiWFdsd3dPNCJ9.4IwxXt_tYpGuh1fCu3Hwpg";
    map = L.mapbox.map('map', 'chposchmann.e48838cb').setView([40.7603, -73.979], 14);
    map.featureLayer.on(Events.Click, function(e) {
      return map.panTo(e.layer.getLatLng());
    });
    return setupPins();
  };
  markers = null;
  geojson = null;
  setupPins = function() {
    var current, geoPoint, geolocation, j, len, pinLayer;
    geojson = [];
    markers = L.mapbox.featureLayer();
    pinLayer = L.mapbox.featureLayer().addTo(map);
    map.featureLayer.on(Events.Click, function(e) {
      return map.panTo(e.layer.getLatLng());
    });
    markers.addTo(map);
    for (j = 0, len = locationsData.length; j < len; j++) {
      current = locationsData[j];
      geolocation = current["geoLocation"];
      geoPoint = {
        "type": "Feature",
        "geometry": {
          "type": "Point",
          "coordinates": [geolocation["longitude"], geolocation["latitude"]]
        },
        "properties": {
          "title": current["name"],
          "image": current.picture.url,
          "address1": current.address1,
          "icon": {
            "className": "address1",
            "iconUrl": "images/pin.png",
            "iconSize": [102, 84]
          }
        }
      };
      geojson.push(geoPoint);
    }
    pinLayer.on('layeradd', function(e) {
      var feature, marker, popupContent;
      marker = e.layer;
      feature = marker.feature;
      marker.setIcon(L.icon(feature.properties.icon));
      popupContent = '<img width="430" src="' + feature.properties.image + '" />' + feature.properties.address1;
      return marker.bindPopup(popupContent, {
        closeButton: false,
        minWidth: 450
      });
    });
    return pinLayer.setGeoJSON(geojson);
  };
  return Utils.delay(0.3, function() {
    return initialize();
  });
};



},{}],"myModule":[function(require,module,exports){
exports.myVar = "myVariable";

exports.myFunction = function() {
  return print("myFunction is running");
};

exports.myArray = [1, 2, 3];



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,
